{"ast":null,"code":"var _jsxFileName = \"/Users/josephzhu/Desktop/chat-app/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/josephzhu/Desktop/chat-app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAwC,OAAxC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAGA,OAAO,YAAP;AACA,OAAQC,OAAR,MAAqB,oBAArB;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBT,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACU,IAAD,EAAMC,OAAN,IAAiBX,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACY,OAAD,EAASC,UAAT,IAAuBb,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACc,QAAD,EAAUC,WAAV,IAAyBf,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAMgB,QAAQ,GAAG,gBAAjB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAACO,MAAAA,IAAD;AAAOE,MAAAA;AAAP,QAAeR,WAAW,CAACe,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAArB;AAEAb,IAAAA,MAAM,GAAGF,EAAE,CAACa,QAAD,CAAX;AAEAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAmB;AAAEX,MAAAA,IAAF;AAASE,MAAAA;AAAT,KAAnB,EAAmC,MAAM,CAExC,CAFD;AAGA,WAAO,MAAM;AACTL,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AAEAd,MAAAA,MAAM,CAACe,GAAP;AACH,KAJD;AAKH,GAhBQ,EAgBN,CAACJ,QAAD,EAAUT,QAAQ,CAACW,MAAnB,CAhBM,CAAT;AAkBAjB,EAAAA,SAAS,CAAE,MAAM;AACbI,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAsBT,OAAD,IAAW;AAC5BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAaF,OAAb,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIP,CAACE,QAAD,CAJO,CAAT;;AAMA,QAAMQ,WAAW,GAAIC,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGZ,OAAH,EAAW;AACPP,MAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA0BP,OAA1B,EAAmC,MAAKC,UAAU,CAAC,EAAD,CAAlD;AACH;AACJ,GAND;;AASAY,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ,EAAoBE,QAApB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAIJ,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ;AAUH,CApDD;;AAsDA,eAAeJ,IAAf","sourcesContent":["import React, {useState, useEffect}from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\n\nimport './Chat.css';\nimport  InfoBar from '../InfoBar/InfoBar';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n    const [name,setName] = useState('');\n    const [room,setRoom] = useState('');\n    const [message,setMessage] = useState('');\n    const [messages,setMessages] = useState([]);\n    const ENDPOINT = 'localhost:5000';\n\n    useEffect(() => {\n        const {name, room} = queryString.parse(location.search);\n\n        socket = io(ENDPOINT);\n\n        setName(name);\n        setRoom(room);\n\n        socket.emit('join',{ name , room },() => {\n\n        });\n        return () => {\n            socket.emit('disconnect');\n\n            socket.off();\n        }\n    }, [ENDPOINT,location.search])\n\n    useEffect( () => {\n        socket.on('message', (message)=>{\n            setMessages([...messages,message]);\n        })\n    },[messages]);\n\n    const sendMessage = (event) => {\n        event.preventDefault();\n\n        if(message){\n            socket.emit('sendMessage',message, ()=> setMessage(''));\n        }\n    }\n\n\n    console.log(message,messages);\n\n    return (\n        <div className = \"outerContainer\">\n            <div className = \"container\">\n                <InfoBar room = {room}/>\n                {/* <input value = {message} onChange = {(event) => event.target.value}\n                onKeyPress = {event => event.key === 'Enter' ? sendMessage(event) :null}\n                /> */}\n            </div>\n        </div>\n    )\n};\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}